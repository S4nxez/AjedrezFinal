Index: src/Figures/Pawn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Figures/Pawn.java b/src/Figures/Pawn.java
--- a/src/Figures/Pawn.java	
+++ b/src/Figures/Pawn.java	
@@ -9,6 +9,15 @@
             nameFigure = "[♙]";
     }
 
+    /*Condiciones que debe cumplir el peon:
+    -Si está en su posición inicial puede mover hasta 2 en vertical
+    -Si hay cambio de fila de valor 1 el movimiento es vertical
+    -Si come ficha se mueve 1 en diagonal
+    -Ningún movimiento puede ir hacia atras
+    -Un peon puede promocionar a cualquier pieza menos peón, independientemente de
+    si excede el número inicial. Ej: 2 damas es válido*/
+
+    /* Hay que añadir la condicion de que haya */
     @Override
     public void movement() {
         //Move
Index: src/Mecanicas/Tablero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Mecanicas/Tablero.java b/src/Mecanicas/Tablero.java
--- a/src/Mecanicas/Tablero.java	
+++ b/src/Mecanicas/Tablero.java	
@@ -4,9 +4,10 @@
     private ChessFigure tableroFichas[][] = new ChessFigure[8][8];
     // [FILAS][COLUMNAS]
 
-    public ChessFigure[][] getTableroFichas(){
-            return tableroFichas;
+    public ChessFigure[][] getTableroFichas() {
+        return tableroFichas;
     }
+
     public Tablero() {
 
         //Peon
@@ -16,16 +17,22 @@
             tableroFichas[6][i] = new Pawn(false);// blancas
 
         //Torres
-        tableroFichas[0][0] = new Rook(true); tableroFichas[0][7] = new Rook(true); //negras
-        tableroFichas[7][0] = new Rook(false); tableroFichas[7][7] = new Rook(false); //blancas
-        
+        tableroFichas[0][0] = new Rook(true);
+        tableroFichas[0][7] = new Rook(true); //negras
+        tableroFichas[7][0] = new Rook(false);
+        tableroFichas[7][7] = new Rook(false); //blancas
+
         //Caballo
-        tableroFichas[0][1] = new Horse(true); tableroFichas[0][6] = new Horse(true); //negras
-        tableroFichas[7][1] = new Horse(false); tableroFichas[7][6] = new Horse(false); //blancas
+        tableroFichas[0][1] = new Horse(true);
+        tableroFichas[0][6] = new Horse(true); //negras
+        tableroFichas[7][1] = new Horse(false);
+        tableroFichas[7][6] = new Horse(false); //blancas
 
         //Alphiles
-        tableroFichas[0][2] = new Bishop(true); tableroFichas[0][5] = new Bishop(true); //negras
-        tableroFichas[7][2] = new Bishop(false); tableroFichas[7][5] = new Bishop(false); //blancas
+        tableroFichas[0][2] = new Bishop(true);
+        tableroFichas[0][5] = new Bishop(true); //negras
+        tableroFichas[7][2] = new Bishop(false);
+        tableroFichas[7][5] = new Bishop(false); //blancas
 
         //Dama
         tableroFichas[0][3] = new Queen(true);//negras
@@ -43,7 +50,7 @@
                 if (tableroFichas[i][j] != null)
                     System.out.print(tableroFichas[i][j].getNameFigure());
                 else
-                    System.out.print("[  ]");
+                    System.out.print("[ ]");
             }
             System.out.println();
         }
@@ -52,6 +59,16 @@
         return tableroFichas[fila][columna]==null;
     }
 
+    public boolean hayPieza(Position pos) {
+        return hayPieza(pos.getFila(), pos.getColumna());
+    }
+
+    public boolean quitaPieza(int fila, int columna){return tableroFichas[fila][columna]==null;}
+    public boolean quitaPieza(Position pos){
+        return quitaPieza(null);}
+
+
+
     public ChessFigure devuelvePieza(int k, int l) {
         return tableroFichas[k][l];
     }
